= aruba

Cucumber steps for driving out command line applications. The command line application can be anything,
a compiled C program, a Java program, a Perl script - anything.

== Usage

  gem install aruba

Then, just require the library in one of your ruby files under <tt>features/support</tt> (e.g. <tt>env.rb</tt>)

  require 'aruba/cucumber'

You now have a bunch of step definitions that you can use in your features. Look at aruba/cucumber.rb
to see all the step definitions. Look at features/*.feature for examples (which are also testing Aruba
itself).

== Tags

Aruba has tags you can put on on individual scenarios, or on a feature.

To get more information use these tags:

* <tt>@announce-cmd</tt> - See what command is is run
* <tt>@announce-stdout</tt> - See the stdout
* <tt>@announce-stderr</tt> - See the stderr
* <tt>@announce-dir</tt> - See the current directory
* <tt>@announce-env</tt> - See environment variables set by Aruba
* <tt>@announce</tt> - Does all of the above

To prevent Aruba from removing its working directory before each scenario:

* <tt>@no-clobber</tt> - Don't cleanup before scenarios

== Runtime Configuration

Per default Aruba will create a directory <tt>tmp/aruba</tt> where it performs it's file operations.
If you want to change this behaviour put this into your <tt>features/support/env.rb</tt>:

  Before do
    @dirs = ["somewhere/else"]
  end

If testing an executable in your project's `bin` directory, it might not be in the path Aruba 
uses.  An easy way to set it is to put the following in <tt>features/support/env.rb</tt>:

    ENV['PATH'] = "#{File.expand_path(File.dirname(__FILE__) + '/../../bin')}#{File::PATH_SEPARATOR}#{ENV['PATH']}"

Set <tt>@aruba_timeout_seconds</tt> to control the amount of time Aruba will wait for a process to 
finish running before terminating it: 

  Before do
    @aruba_timeout_seconds = 5
  end

Running processes interactively can result in race conditions when Aruba executes an IO-related step
but the interactive process has not yet flushed or read some content. To help prevent this Aruba waits
before reading or writing to the process if it is still running. You can control the wait by setting
<tt>@aruba_io_wait_seconds</tt> to an appropriate value. This is particularly useful with tags:

  Before('@slow_process') do
    @aruba_io_wait_seconds = 5
  end

== Reporting

Aruba can generate a HTML page for each scenario that contains:

* The title of the scenario
* The description from the scenario (You can use Markdown here)
* The command(s) that were run
* The output from those commands (in colour if the output uses ANSI escapes)
* The files that were created (in colour - syntax highlighted by [Pygments](http://pygments.org/))

Reporting is off by default, but you can enable it by defining two special environment variables.
The `ARUBA_REPORT_TEMPLATES` variable defines the location of your templates, and `ARUBA_REPORT_DIR` defines 
where reports are written:

    ARUBA_REPORT_TEMPLATES=templates ARUBA_REPORT_DIR=doc cucumber features

The templates directory must contain a `main.erb` and `files.erb` template. This directory can also contain other assets such
as css, javascript and images. All of these files will be copied over as well.

See the templates directory for a sample.

=== Escaping Markdown

There are some edge cases where Gherkin and Markdown don't agree. Bullet lists is one example. They are aliases for step keywords
in Gherkin. Markdown headers (the kind starting with a #) is another example. They are parsed as comments by Gherkin. To use either
of these, just escape them with a backslash. So instead of writing:

    Scenario: Make tea
      ## Making tea
      * Get a pot
      * And some hot water
      
      Given...

You'd write:

    Scenario: Make tea
      \## Making tea
      \* Get a pot
      \* And some hot water
  
      Given...

This way Gherkin won't recognize these lines as special tokens, and the reporter will render them as Markdown. (The reporter strips
away any leading the backslashes before handing it off to the Markdown parser).

=== Prerequisites

Aruba doesn't bundle all of the tools needed for report generation. You have to add these yourself to your project:

* bcat (gem)
* rdiscount (gem)
* pygments

=== Reporting TODO
* Map all a2h colours in reporting.rb and console.css
* Make a nicer looking pygments css
* Javascript for expand/collapse of files (easing?)
* Use a cooler unicode symbol for prompt
* Folder Icons
* Styling: padding, slightly round corners
* Download .tgz and .zip option

== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.  Note: the existing tests may fail
  with pre-1.9 versions of ruby; upgrade to get clean runs.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010 Aslak Helles√∏y and David Chelimsky. See LICENSE for details.
